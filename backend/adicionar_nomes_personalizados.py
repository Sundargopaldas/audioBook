"""
Utilit√°rio para adicionar nomes personalizados ao dicion√°rio fon√©tico.
Use este arquivo para testar novos nomes e suas pron√∫ncias antes de adicion√°-los ao sistema principal.
"""

import os
import sys
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.tasks.audiobook import convert_text_to_speech, preprocess_text_for_tts

def testar_pronucia_personalizada():
    """
    Teste interativo para adicionar e testar novos nomes pr√≥prios.
    """
    print("=== TESTE DE PRON√öNCIA PERSONALIZADA ===\n")
    
    # Nomes personalizados adicionais - ADICIONE AQUI SEUS NOMES
    nomes_personalizados = {
        # Exemplo: 'Nome_Original': 'Pronuncia_Melhorada',
        'Xerath': 'X√©rat',
        'Zythara': 'Zit√°ra', 
        'Korvain': 'Corvain',
        'Sylthris': 'Siltris',
        'Drakmoor': 'Dracmor',
        'Vex': 'V√©cs',
        'Nyx': 'Nics',
        'Zul': 'Zul',
        
        # Adicione mais nomes aqui conforme necess√°rio
        # 'SeuNome': 'ComoDevePronunciar',
    }
    
    # Texto de teste com os nomes personalizados
    texto_teste = f"""
    TESTE DE NOMES PERSONALIZADOS
    
    Os guerreiros Xerath e Zythara partiram de Korvain rumo √† cidade de Sylthris. 
    
    Em Drakmoor, o mago Vex encontrou a assassina Nyx, que havia sido enviada por Zul.
    
    "Xerath proteger√° Zythara!" declarou Korvain.
    "Sylthris aguarda por Drakmoor!" respondeu Vex.
    "Nyx e Zul n√£o prevalecer√£o!" concluiu a batalha.
    
    E assim, os her√≥is de Xerath, Zythara, Korvain e Sylthris derrotaram as for√ßas de Drakmoor, Vex, Nyx e Zul.
    """
    
    print("Texto original:")
    print(texto_teste)
    print("\n" + "="*50 + "\n")
    
    # Aplicar pr√©-processamento com nomes personalizados
    texto_processado = preprocess_text_for_tts(texto_teste.strip(), nomes_personalizados)
    
    print("Texto ap√≥s substitui√ß√µes fon√©ticas:")
    print(texto_processado)
    print("\n" + "="*50 + "\n")
    
    # Mostrar substitui√ß√µes realizadas
    print("Substitui√ß√µes aplicadas:")
    for original, melhorado in nomes_personalizados.items():
        if original.lower() in texto_teste.lower():
            if original.lower() not in texto_processado.lower():
                print(f"‚úÖ {original} ‚Üí {melhorado}")
            else:
                print(f"‚ö†Ô∏è {original} n√£o foi substitu√≠do (verifique se est√° correto)")
    
    print("\n" + "="*50 + "\n")
    
    # Gerar √°udio de teste
    resposta = input("Deseja gerar √°udio de teste? (s/n): ").lower().strip()
    
    if resposta in ['s', 'sim', 'y', 'yes']:
        print("\nGerando √°udio de teste...")
        
        class DummySelf:
            pass
        
        output_file = "teste_nomes_personalizados.mp3"
        
        try:
            result = convert_text_to_speech(DummySelf(), texto_teste.strip(), output_file)
            print(f"‚úÖ √Åudio gerado: {result}")
            
            if os.path.exists(result):
                size = os.path.getsize(result)
                print(f"üìÅ Tamanho: {size} bytes")
                print(f"üéµ Dura√ß√£o estimada: ~{size/32000:.1f} segundos")
                print("\nüéß Escute o arquivo para verificar se os nomes est√£o sendo pronunciados corretamente!")
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar √°udio: {str(e)}")
    
    print("\n" + "="*50)
    print("COMO USAR:")
    print("1. Adicione seus nomes no dicion√°rio 'nomes_personalizados' acima")
    print("2. Execute este script para testar")
    print("3. Ajuste as pron√∫ncias conforme necess√°rio")
    print("4. Quando estiver satisfeito, adicione os nomes ao arquivo principal")
    print("="*50)

def adicionar_nome_interativo():
    """
    Fun√ß√£o interativa para adicionar novos nomes.
    """
    print("\n=== ADICIONAR NOVO NOME ===")
    
    nome_original = input("Digite o nome original: ").strip()
    if not nome_original:
        print("Nome n√£o pode estar vazio!")
        return
    
    print(f"\nComo '{nome_original}' deve ser pronunciado?")
    print("Exemplos:")
    print("- Kanzime ‚Üí Canzimi")
    print("- Xerath ‚Üí X√©rat") 
    print("- Zythara ‚Üí Zit√°ra")
    
    pronuncia = input("Digite a pron√∫ncia melhorada: ").strip()
    if not pronuncia:
        print("Pron√∫ncia n√£o pode estar vazia!")
        return
    
    # Criar texto de teste
    texto_teste = f"O her√≥i {nome_original} partiu em sua jornada. {nome_original} era conhecido por sua coragem."
    
    print(f"\nTeste com '{nome_original}' ‚Üí '{pronuncia}':")
    
    nomes_teste = {nome_original: pronuncia}
    texto_processado = preprocess_text_for_tts(texto_teste, nomes_teste)
    
    print(f"Antes: {texto_teste}")
    print(f"Depois: {texto_processado}")
    
    # Confirmar se quer gerar √°udio
    gerar = input("\nGerar √°udio de teste? (s/n): ").lower().strip()
    
    if gerar in ['s', 'sim', 'y', 'yes']:
        try:
            class DummySelf:
                pass
            
            output_file = f"teste_{nome_original.lower()}.mp3"
            result = convert_text_to_speech(DummySelf(), texto_teste, output_file)
            print(f"‚úÖ √Åudio gerado: {result}")
            
        except Exception as e:
            print(f"‚ùå Erro: {str(e)}")
    
    print(f"\nüìù Para adicionar permanentemente, adicione esta linha ao dicion√°rio:")
    print(f"    '{nome_original}': '{pronuncia}',")

if __name__ == "__main__":
    print("Escolha uma op√ß√£o:")
    print("1. Testar nomes personalizados predefinidos")
    print("2. Adicionar novo nome interativamente")
    
    opcao = input("Digite 1 ou 2: ").strip()
    
    if opcao == "1":
        testar_pronucia_personalizada()
    elif opcao == "2":
        adicionar_nome_interativo()
    else:
        print("Op√ß√£o inv√°lida!") 